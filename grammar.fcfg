% start S

###############################################################################
# Grammar Rules
###############################################################################

S[SEM = <?subj(?vp)>] -> NP[SEM = ?subj] VP[SEM = ?vp]

NP[SEM = ?np] -> PropN[SEM = ?np]

VP[SEM = ?v] -> IV[SEM = ?v]
VP[SEM = <?v(?obj)>] -> TV[SEM = ?v] NP[SEM = ?obj] 
VP[SEM = <?obj(?v)>] -> TV[SEM = ?v] Refl[SEM = ?obj]

###############################################################################
# Lexical Rules
###############################################################################

# Intransitive Verbs
IV[SEM = <\x.walk(x)>] -> 'walks'
IV[SEM = <\x.sleep(x)>] -> 'sleeps'
IV[SEM = <\x.eat(x)>] -> 'eats'
IV[SEM = <\x.run(x)>] -> 'runs'
IV[SEM = <\x.sing(x)>] -> 'sings'
IV[SEM = <\x.dance(x)>] -> 'dances'
IV[SEM = <\x.fly(x)>] -> 'flies'
IV[SEM = <\x.slumber(x)>] -> 'slumbers'

# Transitive Verbs
TV[SEM = <\X y.X(\x.see(y, x))>] -> 'sees'
TV[SEM = <\X y.X(\x.meet(y, x))>] -> 'meets'
TV[SEM = <\X y.X(\x.like(y, x))>] -> 'likes'
TV[SEM = <\X y.X(\x.dislike(y, x))>] -> 'dislikes'
TV[SEM = <\X y.X(\x.throw(y,x))>] -> 'throws'
TV[SEM = <\X y.X(\x.notice(y,x))>] -> 'notices'
TV[SEM = <\X y.X(\x.know(y,x))>] -> 'knows'

# Proper Nouns
PropN[SEM = <\P.P(alice)>] -> 'Alice'
PropN[SEM = <\P.P(bob)>] -> 'Bob'
PropN[SEM = <\P.P(claire)>] -> 'Claire'
PropN[SEM = <\P.P(daniel)>] -> 'Daniel'
PropN[SEM = <\P.P(eliza)>] -> 'Eliza'
PropN[SEM = <\P.P(francis)>] -> 'Francis'
PropN[SEM = <\P.P(grace)>] -> 'Grace'
PropN[SEM = <\P.P(henry)>] -> 'Henry'
PropN[SEM = <\P.P(isla)>] -> 'Isla'
PropN[SEM = <\P.P(john)>] -> 'John'
PropN[SEM = <\P.P(kathrine)>] -> 'Katherine'
PropN[SEM = <\P.P(lewis)>] -> 'Lewis'
PropN[SEM = <\P.P(margaret)>] -> 'Margaret'
PropN[SEM = <\P.P(neha)>] -> 'Neha'
PropN[SEM = <\P.P(oswald)>] -> 'Oswald'
PropN[SEM = <\P.P(patricia)>] -> 'Patricia'
PropN[SEM = <\P.P(quinn)>] -> 'Quinn'
PropN[SEM = <\P.P(rachael)>] -> 'Rachael'
PropN[SEM = <\P.P(samuel)>] -> 'Samuel'
PropN[SEM = <\P.P(tracy)>] -> 'Tracy'
PropN[SEM = <\P.P(ursula)>] -> 'Ursula'
PropN[SEM = <\P.P(victor)>] -> 'Victor'
PropN[SEM = <\P.P(winnifred)>] -> 'Winnifred'
PropN[SEM = <\P.P(xerxes)>] -> 'Xerxes'
PropN[SEM = <\P.P(yvettte)>] -> 'Yvette'
PropN[SEM = <\P.P(zelda)>] -> 'Zelda'

# Anaphors
Refl[SEM = <\V z.(V(\Q.Q(z))(z))>] -> 'Himself'

# Quantifiers
NP[SEM = <\P.all x.(person(x) -> P(x))>] -> 'Everyone'
NP[SEM = <\P.exists x.(person(x) & P(x))>] -> 'Someone'
