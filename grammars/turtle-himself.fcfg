% start S

###############################################################################
## Grammar Rules
###############################################################################

S[SEM = <?subj(?vp)>] -> NP[SEM = ?subj, GEN=?g] VP[SEM = ?vp, GEN = ?g]

NP[SEM = ?np, GEN=?g, -QP] -> PropN[SEM = ?np, GEN = ?g] 
NP[SEM = ?np, GEN=?g, +QP] -> QP[SEM = ?np, GEN = ?g]

QP[SEM = <?q(?n)>] -> Q[SEM = ?q] N[SEM = ?n]
QP[SEM = <?q(?pp(?n))>] -> Q[SEM = ?q] N[SEM = ?n] PP[SEM = ?pp]

PP[SEM = <?np(?p)>] -> P[SEM = ?p] PropN[SEM = ?np]

VP[SEM = ?v] -> IV[SEM = ?v]
VP[SEM = <?v(?obj)>] -> TV[SEM = ?v] NP[SEM = ?obj, -QP] 
VP[SEM = <?obj(?v)>, GEN=?g] -> TV[SEM = ?v] Refl[SEM = ?obj, GEN = ?g]
VP[SEM = <?v(?obj)>] -> TV[SEM = ?v] PropN[SEM = ?obj]

###############################################################################
## Lexical Rules
###############################################################################

# Intransitive Verbs
IV[SEM = <\x.walk(x)>] -> 'walks'
IV[SEM = <\x.sleep(x)>] -> 'sleeps'
IV[SEM = <\x.eat(x)>] -> 'eats'
IV[SEM = <\x.run(x)>] -> 'runs'
IV[SEM = <\x.sing(x)>] -> 'sings'
IV[SEM = <\x.dance(x)>] -> 'dances'
IV[SEM = <\x.fly(x)>] -> 'flies'
IV[SEM = <\x.slumber(x)>] -> 'slumbers'

# Transitive Verbs
TV[SEM = <\X y.X(\x.see(y, x))>] -> 'sees'
TV[SEM = <\X y.X(\x.meet(y, x))>] -> 'meets'
TV[SEM = <\X y.X(\x.like(y, x))>] -> 'likes'
TV[SEM = <\X y.X(\x.dislike(y, x))>] -> 'dislikes'
TV[SEM = <\X y.X(\x.throw(y,x))>] -> 'throws'
TV[SEM = <\X y.X(\x.notice(y,x))>] -> 'notices'
TV[SEM = <\X y.X(\x.know(y,x))>] -> 'knows'

# Proper Nouns
PropN[SEM = <\P.P(alice)>, GEN=f] -> 'Alice'
PropN[SEM = <\P.P(bob)>, GEN=m] -> 'Bob'
PropN[SEM = <\P.P(claire)>, GEN=f] -> 'Claire'
PropN[SEM = <\P.P(daniel)>, GEN=m] -> 'Daniel'
PropN[SEM = <\P.P(eliza)>, GEN=f] -> 'Eliza'
PropN[SEM = <\P.P(francis)>, GEN=m] -> 'Francis'
PropN[SEM = <\P.P(grace)>, GEN=f] -> 'Grace'
PropN[SEM = <\P.P(henry)>, GEN=m] -> 'Henry'
PropN[SEM = <\P.P(isla)>, GEN=f] -> 'Isla'
PropN[SEM = <\P.P(john)>, GEN=m] -> 'John'
PropN[SEM = <\P.P(katherine)>, GEN=f] -> 'Katherine'
PropN[SEM = <\P.P(lewis)>, GEN=m] -> 'Lewis'
PropN[SEM = <\P.P(margaret)>, GEN=f] -> 'Margaret'
PropN[SEM = <\P.P(neha)>, GEN=f] -> 'Neha'
PropN[SEM = <\P.P(oswald)>, GEN=m] -> 'Oswald'
PropN[SEM = <\P.P(patricia)>, GEN=f] -> 'Patricia'
PropN[SEM = <\P.P(quinn)>, GEN=m] -> 'Quinn'
PropN[SEM = <\P.P(rachael)>, GEN=f] -> 'Rachael'
PropN[SEM = <\P.P(samuel)>, GEN=m] -> 'Samuel'
PropN[SEM = <\P.P(tracy)>, GEN=f] -> 'Tracy'
PropN[SEM = <\P.P(ursula)>, GEN=f] -> 'Ursula'
PropN[SEM = <\P.P(victor)>, GEN=m] -> 'Victor'
PropN[SEM = <\P.P(winnifred)>, GEN=f] -> 'Winnifred'
PropN[SEM = <\P.P(xerxes)>, GEN=m] -> 'Xerxes'
PropN[SEM = <\P.P(yvettte)>, GEN=f] -> 'Yvette'
PropN[SEM = <\P.P(zelda)>, GEN=f] -> 'Zelda'

# Anaphors
Refl[SEM = <\V z.(V(\Q.Q(z))(z))>, GEN=m] -> 'Himself'
Refl[SEM = <\V z.(V(\Q.Q(z))(z))>, GEN=f] -> 'Herself'

# Quantifiers
Q[SEM = <\P Q.(all x. (P(x) -> Q(x)))>] -> 'Every'
QP[SEM = <\P.all x.(person(x) -> P(x))>] -> 'Everyone'
QP[SEM = <\P.exists x.(person(x) & P(x))>] -> 'Someone'

# Regular nouns
N[SEM = <\x.turtle(x)>] -> 'turtle'
N[SEM = <\x.person(x)>] -> 'person'
N[SEM = <\x.hoplite(x)>] -> 'hoplite'

# PP
P[SEM = <\y P x.(P(x) & near(x, y))>] -> 'near'